{
  "_from": "datatables-query",
  "_id": "datatables-query@0.2.0",
  "_inBundle": false,
  "_integrity": "sha1-zgL9i9GW/5Y918LSTgl8fxDr6CE=",
  "_location": "/datatables-query",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "datatables-query",
    "fetchSpec": "latest",
    "name": "datatables-query",
    "raw": "datatables-query",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/datatables-query/-/datatables-query-0.2.0.tgz",
  "_shasum": "ce02fd8bd196ff963dd7c2d24e097c7f10ebe821",
  "_shrinkwrap": null,
  "_spec": "datatables-query",
  "_where": "/home/gugum/projectx/SARFBASE",
  "author": {
    "name": "Vinicius Teixeira"
  },
  "bugs": {
    "url": "https://github.com/fiddus/datatables-query/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "async": "^1.4.2"
  },
  "deprecated": false,
  "description": "A module for doing MongoDB pagination and search, based on DataTables query model. Relies on Express and Mongoose.",
  "devDependencies": {
    "chai": "^3.2.0",
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.3",
    "grunt-jscs": "^2.1.0",
    "grunt-release": "^0.13.0",
    "sinon": "^1.16.1"
  },
  "homepage": "https://github.com/fiddus/datatables-query#readme",
  "keywords": [
    "Express",
    "MongoDB",
    "datatables",
    "expressjs",
    "mongoose",
    "node",
    "nodejs",
    "pagination"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "datatables-query",
  "optionalDependencies": {},
  "readme": "# datatablesQuery\n\ndatatablesQuery is a module for making the integration between front-end tables using\n[datatables](https://www.datatables.net/) and a REST API, node.js, express, MongoDB and Mongoose backed Servers, easier.\n\nThe main purpose is dealing with server side processing available in datatables, making it easy to integrate client and\nserver.\n\n## Getting Started\n\nInstall the module.\n\n```\nnpm install datatables-query\n```\n\nIn your front-end, configure your DataTable to use serverSide processing and Ajax. The request type MUST be 'POST'.\n\n```javascript\n// jQuery way\n$('#example').DataTable( {\n    serverSide: true,\n    ajax: {\n        url: '/path/to/api/endpoint',\n        type: 'POST'\n    }\n} );\n```\n\n\n```javascript\n// Angular way - @see https://l-lin.github.io/angular-datatables/#/serverSideProcessing for full example\n\nvm.dtOptions = DTOptionsBuilder.newOptions()\n    .withOptions('serverSide', true)\n    .withOptions('ajax', {\n        url: '/path/to/api/endpoint',\n        type: 'POST'\n    })\n    .// all other options\n\n```\n\nIn your server, you MUST use `body-parser` with `urlencoded extended`\n\n```javascript\nvar app = express();\n\napp.use(bodyParser.urlencoded({extended: true});\n```\n\n\nIn the route handler, import the module and pass a reference to the mongoose model you wish to use as data source.\n\nThe DataTables params will get caught in the request body. It should be passed to the run method, which will return a\npromise.\n\n```javascript\n\napp.post('/path/to/api/endpoint', function (req, res) {\n    var Model = require('./path/to/model'),\n        datatablesQuery = require('datatables-query'),\n        params = req.body,\n        query = datatablesQuery(Model);\n\n    query.run(params).then(function (data) {\n        res.json(data);\n    }, function (err) {\n        res.status(500).json(err);\n    });\n};\n```\n\nThat's all folks. Your table should be working just fine.\n\n## Assumptions\n\nAs noted above, it is assumed that the server parses the request using extended urlencoded and that the data object is\na Mongoose object.\n\nDatatables with serverSide processing enabled makes POST requests with content-type `application/x-www-form-urlencoded`,\nand express' module body parser makes it easiear to work with this data, transforming it to JSON and parsing arrays and\nobjects.\n\n## Using Without Datatables\n\nOne could use this module without datatables in the front-end making requests. For this to work, the POST body must\nbe a configuration object equivalent to the one shown below:\n\n```javascript\n// req.body should be equivalent to:\n{\n    \"draw\": \"3\",  // datatable stuff, but is mandatory nonetheless\n    \"start\": \"0\",\n    \"length\": \"10\",\n    \"search\": {\n        \"value\": \"\"\n    },\n    \"columns\": [\n        {\n            \"data\": \"name\", // field name in the MongoDB Schema\n            \"searchable\": \"true\", // mandatory\n            \"orderable\": \"true\" // mandatory\n        },\n        {\n            // .. same structure as above for each field\n        }\n    ],\n    \"order\": [\n        {\n            \"column\": \"1\", // index of the column used for sorting\n            \"dir\": \"asc\" // direction of sorting ('asc' | 'desc')\n        }\n    ]\n}\n```\n\n## TODO\n\n- Add examples to this repo\n- Implement filter by column\n- Add tests to the 'run' method\n\n## Contributing\n\nFeel free to fork and mess with this code. But, before opening PRs, be sure that you adhere to the Code Style and Conventions\n(run `grunt lint`) and add/correct as many tests as needed to ensure your code is working as expected.\n\n## License\n\nThe MIT License (MIT)\n\n[![Fiddus Tecnologia](http://fiddus.com.br/assets/img/logo-site.png)](http://fiddus.com.br)\n\nCopyright (c) 2015 Vinicius Teixeira vinicius0026@gmail.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fiddus/datatables-query.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.2.0"
}
