#include <ESP8266WiFi.h>

#include <DHT.h>



#define DHTPIN D4    // what digital pin we're connected to



#define DHTTYPE DHT22   // DHT 22  (AM2302), AM2321



DHT dht(DHTPIN, DHTTYPE);

int led = D5;  // Output ketika temp>35

const char* ssid     = "Suprayitno";

const char* password = "08811210144";

//const char* host = "172.21.1.146";

const char* host = "103.225.88.36";

const char* site = " " ;

const char* id = "IBST2" ;





void setup()

{

  Serial.begin(115200);

  delay(10);

  Serial.println("DHTxx test!");

  dht.begin();

  pinMode(led,OUTPUT);



  // We start by connecting to a WiFi network



  Serial.println();

  Serial.println();

  Serial.print("Connecting to ");

  Serial.println(ssid);



  WiFi.begin(ssid, password);



  while (WiFi.status() != WL_CONNECTED) {

    delay(500);

    Serial.print(".");

  }



  Serial.println("");

  Serial.println("WiFi connected");

  Serial.println("IP address: ");

  Serial.println(WiFi.localIP());

}



void loop() {

  delay(5000);

  int acpwr    = analogRead(A0) + 12;  // ACpwr

  int door     = analogRead(D0)/1023 ;  // Door

// int DcFan    = analogRead(D3)/1023 ;  // D3 tdk bisa



  float temp = dht.readTemperature()- 1.70;  // temp

  float hum  = dht.readHumidity()- 10.00;     // hum



  if (temp >= 35.00)

  {

   digitalWrite(led,LOW); // untuk switch over AC emergency

  }

  if (temp<=30.00)

  {

   digitalWrite(led,HIGH);

  }



  if (isnan(hum) || isnan(temp)) {

    Serial.println("Failed to read from DHT sensor!");

   // return;

  }

  Serial.print(hum);



  Serial.print(temp);



  // return;



  Serial.print("connecting to ");

  Serial.println(host);



  // Use WiFiClient class to create TCP connections

  WiFiClient client;

  const int httpPort = 8888;

  if (!client.connect(host, httpPort)) {

    Serial.println("connection failed");

    return;

  }



  // We now create a URI for the request

  String url = "/data?id=" + String(id) + "&a=" + String(site) + "&b=" + String(temp) + "&c=" + String(hum) + "&d=" + String(door) + "&e=" + String(acpwr);

  Serial.print("Requesting URL: ");

  Serial.println(url);



  // This will send the request to the server

  client.print(String("GET ") + url + " HTTP/1.1\r\n" +

               "Host: " + host + "\r\n" +

               "Connection: close\r\n\r\n");

  unsigned long timeout = millis();

  while (client.available() == 0) {

    if (millis() - timeout > 5000) {

      Serial.println(">>> Client Timeout !");

      client.stop();

    }

  }



  // Read all the lines of the reply from server and print them to Serial

  while(client.available()){

    String line = client.readStringUntil('\r');

    Serial.print(line);

  }



  Serial.println();

  Serial.println("closing connection");

}
